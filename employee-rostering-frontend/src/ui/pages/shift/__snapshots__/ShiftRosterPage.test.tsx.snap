// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Shift Roster Page should render correctly when loaded 1`] = `
<Fragment>
  <Level
    className=""
    gutter="sm"
    style={
      Object {
        "backgroundColor": "var(--pf-global--BackgroundColor--100)",
        "height": "60px",
        "padding": "5px 5px 5px 5px",
      }
    }
  >
    <LevelItem
      style={
        Object {
          "display": "flex",
        }
      }
    >
      <WeekPicker
        onChange={[Function]}
        value={2018-07-01T04:00:00.000Z}
      />
      <TypeaheadSelectInput
        defaultValue={
          Object {
            "id": 2,
            "name": "Spot",
            "requiredSkillSet": Array [
              Object {
                "id": 3,
                "name": "Skill",
                "tenantId": 0,
                "version": 0,
              },
            ],
            "tenantId": 0,
            "version": 0,
          }
        }
        emptyText="Select Spots"
        onChange={[Function]}
        optionToStringMap={[Function]}
        options={
          Array [
            Object {
              "id": 2,
              "name": "Spot",
              "requiredSkillSet": Array [
                Object {
                  "id": 3,
                  "name": "Skill",
                  "tenantId": 0,
                  "version": 0,
                },
              ],
              "tenantId": 0,
              "version": 0,
            },
          ]
        }
      />
    </LevelItem>
    <LevelItem
      style={
        Object {
          "display": "flex",
        }
      }
    >
      <Button
        onClick={[MockFunction]}
      >
        Publish
      </Button>
      <Button
        onClick={[MockFunction]}
      >
        Schedule
      </Button>
      <Button
        onClick={[Function]}
      >
        Refresh
      </Button>
      <Button
        onClick={[Function]}
      >
        Create Shift
      </Button>
    </LevelItem>
  </Level>
  <div
    style={
      Object {
        "height": "calc(100% - 60px)",
      }
    }
  >
    <Connect(EditShiftModal)
      isOpen={false}
      onClose={[Function]}
      onDelete={[Function]}
      onSave={[Function]}
    />
    <Title
      size="md"
    >
      Spot
    </Title>
    <div
      style={
        Object {
          "height": "calc(100% - 20px)",
        }
      }
    >
      <ForwardRef
        allDayAccessor={[Function]}
        components={
          Object {
            "event": [Function],
            "eventWrapper": [Function],
          }
        }
        date={2018-07-01T04:00:00.000Z}
        dayPropGetter={[Function]}
        endAccessor={[Function]}
        eventPropGetter={[Function]}
        events={
          Array [
            Object {
              "contractMinutesViolationPenaltyList": Array [],
              "desiredTimeslotForEmployeeRewardList": Array [],
              "employee": Object {
                "contract": Object {
                  "id": 5,
                  "maximumMinutesPerDay": 10,
                  "maximumMinutesPerMonth": 500,
                  "maximumMinutesPerWeek": 70,
                  "maximumMinutesPerYear": 6000,
                  "name": "Basic Contract",
                  "tenantId": 0,
                  "version": 0,
                },
                "id": 4,
                "name": "Employee 1",
                "skillProficiencySet": Array [
                  Object {
                    "id": 6,
                    "name": "Not Required Skill",
                    "tenantId": 0,
                    "version": 0,
                  },
                ],
                "tenantId": 0,
                "version": 0,
              },
              "endDateTime": 2018-07-01T21:00:00.000Z,
              "id": 1,
              "indictmentScore": Object {
                "hardScore": 0,
                "mediumScore": 0,
                "softScore": 0,
              },
              "pinnedByUser": false,
              "requiredSkillViolationList": Array [],
              "rotationEmployee": Object {
                "contract": Object {
                  "id": 5,
                  "maximumMinutesPerDay": 10,
                  "maximumMinutesPerMonth": 500,
                  "maximumMinutesPerWeek": 70,
                  "maximumMinutesPerYear": 6000,
                  "name": "Basic Contract",
                  "tenantId": 0,
                  "version": 0,
                },
                "id": 7,
                "name": "Rotation Employee",
                "skillProficiencySet": Array [
                  Object {
                    "id": 6,
                    "name": "Not Required Skill",
                    "tenantId": 0,
                    "version": 0,
                  },
                ],
                "tenantId": 0,
                "version": 0,
              },
              "rotationViolationPenaltyList": Array [],
              "shiftEmployeeConflictList": Array [],
              "spot": Object {
                "id": 2,
                "name": "Spot",
                "requiredSkillSet": Array [
                  Object {
                    "id": 3,
                    "name": "Skill",
                    "tenantId": 0,
                    "version": 0,
                  },
                ],
                "tenantId": 0,
                "version": 0,
              },
              "startDateTime": 2018-07-01T13:00:00.000Z,
              "tenantId": 0,
              "unassignedShiftPenaltyList": Array [],
              "unavailableEmployeeViolationList": Array [],
              "undesiredTimeslotForEmployeePenaltyList": Array [],
              "version": 0,
            },
          ]
        }
        key="2"
        length={0}
        localizer={
          DateLocalizer {
            "format": [Function],
            "formats": Object {
              "agendaDateFormat": "ddd MMM DD",
              "agendaHeaderFormat": [Function],
              "agendaTimeFormat": "LT",
              "agendaTimeRangeFormat": [Function],
              "dateFormat": "DD",
              "dayFormat": "DD ddd",
              "dayHeaderFormat": "dddd MMM DD",
              "dayRangeHeaderFormat": [Function],
              "eventTimeRangeEndFormat": [Function],
              "eventTimeRangeFormat": [Function],
              "eventTimeRangeStartFormat": [Function],
              "monthHeaderFormat": "MMMM YYYY",
              "selectRangeFormat": [Function],
              "timeGutterFormat": "LT",
              "weekdayFormat": "ddd",
            },
            "propType": [Function],
            "startOfWeek": [Function],
          }
        }
        onNavigate={[Function]}
        onSelectSlot={[Function]}
        onView={[Function]}
        selectable={true}
        showMultiDayTimes={true}
        startAccessor={[Function]}
        timeslots={4}
        titleAccessor={[Function]}
        toolbar={false}
        view="week"
        views={
          Array [
            "week",
          ]
        }
      />
    </div>
  </div>
</Fragment>
`;
