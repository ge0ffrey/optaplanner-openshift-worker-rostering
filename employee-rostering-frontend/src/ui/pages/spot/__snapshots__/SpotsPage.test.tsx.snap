// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Spots page should render correctly with a few spots 1`] = `
<Card>
  <div
    style={
      Object {
        "display": "grid",
        "gridTemplateColumns": "min-content auto min-content max-content",
      }
    }
  >
    <FilterComponent
      filterListParentId="filter-list"
      filters={
        Array [
          Object {
            "getComponent": [Function],
            "name": "Name",
          },
        ]
      }
      onChange={[Function]}
    />
    <span />
    <Button
      isDisabled={false}
      onClick={[Function]}
    >
      Add
    </Button>
    <Pagination
      className=""
      dropDirection="down"
      itemCount={2}
      itemsEnd={null}
      itemsStart={null}
      onFirstClick={[Function]}
      onLastClick={[Function]}
      onNextClick={[Function]}
      onPageInput={[Function]}
      onPerPageSelect={[Function]}
      onPreviousClick={[Function]}
      onSetPage={[Function]}
      page={1}
      perPage={10}
      perPageOptions={
        Array [
          Object {
            "title": "10",
            "value": 10,
          },
          Object {
            "title": "20",
            "value": 20,
          },
          Object {
            "title": "50",
            "value": 50,
          },
          Object {
            "title": "100",
            "value": 100,
          },
        ]
      }
      titles={
        Object {
          "currPage": "Current page",
          "items": "items",
          "itemsPerPage": "Items per page",
          "optionsToggle": "Select",
          "pages": "pages",
          "paginationTitle": "Pagination",
          "perPageSuffix": "per page",
          "toFirstPage": "Go to first page",
          "toLastPage": "Go to last page",
          "toNextPage": "Go to next page",
          "toPreviousPage": "Go to previous page",
        }
      }
      toggleTemplate={[Function]}
      variant="top"
      widgetId="pagination-options-menu-top"
    />
  </div>
  <Table
    borders={true}
    caption="Spots"
    cells={
      Array [
        Object {
          "cellTransforms": Array [
            [Function],
          ],
          "props": Object {},
          "title": "Name",
          "transforms": Array [
            [Function],
          ],
        },
        Object {
          "cellTransforms": Array [
            [Function],
          ],
          "props": Object {},
          "title": "",
          "transforms": undefined,
        },
      ]
    }
    className=""
    contentId="expanded-content"
    dropdownDirection="down"
    dropdownPosition="right"
    expandId="expandable-toggle"
    gridBreakPoint="grid-md"
    onCollapse={null}
    onExpand={null}
    onSort={[Function]}
    role="grid"
    rowLabeledBy="simple-node"
    rows={
      Array [
        Object {
          "cells": Array [
            Object {
              "title": <EditableComponent
                editor={
                  <TextInput
                    aria-label="Name"
                    className=""
                    defaultValue="Spot 1"
                    isDisabled={false}
                    isReadOnly={false}
                    isRequired={false}
                    isValid={true}
                    name="name"
                    onChange={[Function]}
                    type="text"
                  />
                }
                isEditing={false}
                viewer={
                  <Text>
                    Spot 1
                  </Text>
                }
              />,
            },
            Object {
              "title": <EditableComponent
                editor={
                  <MultiTypeaheadSelectInput
                    defaultValue={Array []}
                    emptyText="Select required skills"
                    onChange={[Function]}
                    optionToStringMap={[Function]}
                    options={
                      Array [
                        Object {
                          "name": "Skill 1",
                          "tenantId": 0,
                        },
                        Object {
                          "name": "Skill 2",
                          "tenantId": 0,
                        },
                      ]
                    }
                  />
                }
                isEditing={false}
                viewer={
                  <ChipGroup
                    className=""
                    collapsedText="\${remaining} more"
                    expandedText="Show Less"
                    withToolbar={false}
                  />
                }
              />,
            },
            Object {
              "title": <EditableComponent
                editor={
                  <span>
                    <Button
                      aria-label="Save"
                      onClick={[Function]}
                      variant="link"
                    >
                      <SaveIcon
                        color="currentColor"
                        size="sm"
                        title={null}
                      />
                    </Button>
                    <Button
                      aria-label="Cancel"
                      onClick={[Function]}
                      variant="link"
                    >
                      <CloseIcon
                        color="currentColor"
                        size="sm"
                        title={null}
                      />
                    </Button>
                  </span>
                }
                isEditing={false}
                viewer={
                  <span>
                    <Button
                      aria-label="Edit"
                      onClick={[Function]}
                      variant="link"
                    >
                      <EditIcon
                        color="currentColor"
                        size="sm"
                        title={null}
                      />
                    </Button>
                    <Button
                      aria-label="Delete"
                      onClick={[Function]}
                      variant="link"
                    >
                      <TrashIcon
                        color="currentColor"
                        size="sm"
                        title={null}
                      />
                    </Button>
                  </span>
                }
              />,
            },
          ],
        },
        Object {
          "cells": Array [
            Object {
              "title": <EditableComponent
                editor={
                  <TextInput
                    aria-label="Name"
                    className=""
                    defaultValue="Spot 2"
                    isDisabled={false}
                    isReadOnly={false}
                    isRequired={false}
                    isValid={true}
                    name="name"
                    onChange={[Function]}
                    type="text"
                  />
                }
                isEditing={false}
                viewer={
                  <Text>
                    Spot 2
                  </Text>
                }
              />,
            },
            Object {
              "title": <EditableComponent
                editor={
                  <MultiTypeaheadSelectInput
                    defaultValue={
                      Array [
                        Object {
                          "name": "Skill 1",
                          "tenantId": 0,
                        },
                        Object {
                          "name": "Skill 2",
                          "tenantId": 0,
                        },
                      ]
                    }
                    emptyText="Select required skills"
                    onChange={[Function]}
                    optionToStringMap={[Function]}
                    options={
                      Array [
                        Object {
                          "name": "Skill 1",
                          "tenantId": 0,
                        },
                        Object {
                          "name": "Skill 2",
                          "tenantId": 0,
                        },
                      ]
                    }
                  />
                }
                isEditing={false}
                viewer={
                  <ChipGroup
                    className=""
                    collapsedText="\${remaining} more"
                    expandedText="Show Less"
                    withToolbar={false}
                  >
                    <Chip
                      className=""
                      closeBtnAriaLabel="close"
                      component="div"
                      isOverflowChip={false}
                      isReadOnly={true}
                      onClick={[Function]}
                      tooltipPosition="top"
                    >
                      Skill 1
                    </Chip>
                    <Chip
                      className=""
                      closeBtnAriaLabel="close"
                      component="div"
                      isOverflowChip={false}
                      isReadOnly={true}
                      onClick={[Function]}
                      tooltipPosition="top"
                    >
                      Skill 2
                    </Chip>
                  </ChipGroup>
                }
              />,
            },
            Object {
              "title": <EditableComponent
                editor={
                  <span>
                    <Button
                      aria-label="Save"
                      onClick={[Function]}
                      variant="link"
                    >
                      <SaveIcon
                        color="currentColor"
                        size="sm"
                        title={null}
                      />
                    </Button>
                    <Button
                      aria-label="Cancel"
                      onClick={[Function]}
                      variant="link"
                    >
                      <CloseIcon
                        color="currentColor"
                        size="sm"
                        title={null}
                      />
                    </Button>
                  </span>
                }
                isEditing={false}
                viewer={
                  <span>
                    <Button
                      aria-label="Edit"
                      onClick={[Function]}
                      variant="link"
                    >
                      <EditIcon
                        color="currentColor"
                        size="sm"
                        title={null}
                      />
                    </Button>
                    <Button
                      aria-label="Delete"
                      onClick={[Function]}
                      variant="link"
                    >
                      <TrashIcon
                        color="currentColor"
                        size="sm"
                        title={null}
                      />
                    </Button>
                  </span>
                }
              />,
            },
          ],
        },
      ]
    }
    sortBy={Object {}}
    variant={null}
  >
    <TableHeader
      className=""
    />
    <TableBody
      className=""
      onRowClick={[Function]}
      rowKey="id"
    />
  </Table>
</Card>
`;

exports[`Spots page should render correctly with no spots 1`] = `
<Card>
  <div
    style={
      Object {
        "display": "grid",
        "gridTemplateColumns": "min-content auto min-content max-content",
      }
    }
  >
    <FilterComponent
      filterListParentId="filter-list"
      filters={
        Array [
          Object {
            "getComponent": [Function],
            "name": "Name",
          },
        ]
      }
      onChange={[Function]}
    />
    <span />
    <Button
      isDisabled={false}
      onClick={[Function]}
    >
      Add
    </Button>
    <Pagination
      className=""
      dropDirection="down"
      itemCount={0}
      itemsEnd={null}
      itemsStart={null}
      onFirstClick={[Function]}
      onLastClick={[Function]}
      onNextClick={[Function]}
      onPageInput={[Function]}
      onPerPageSelect={[Function]}
      onPreviousClick={[Function]}
      onSetPage={[Function]}
      page={1}
      perPage={10}
      perPageOptions={
        Array [
          Object {
            "title": "10",
            "value": 10,
          },
          Object {
            "title": "20",
            "value": 20,
          },
          Object {
            "title": "50",
            "value": 50,
          },
          Object {
            "title": "100",
            "value": 100,
          },
        ]
      }
      titles={
        Object {
          "currPage": "Current page",
          "items": "items",
          "itemsPerPage": "Items per page",
          "optionsToggle": "Select",
          "pages": "pages",
          "paginationTitle": "Pagination",
          "perPageSuffix": "per page",
          "toFirstPage": "Go to first page",
          "toLastPage": "Go to last page",
          "toNextPage": "Go to next page",
          "toPreviousPage": "Go to previous page",
        }
      }
      toggleTemplate={[Function]}
      variant="top"
      widgetId="pagination-options-menu-top"
    />
  </div>
  <Table
    borders={true}
    caption="Spots"
    cells={
      Array [
        Object {
          "cellTransforms": Array [
            [Function],
          ],
          "props": Object {},
          "title": "Name",
          "transforms": Array [
            [Function],
          ],
        },
        Object {
          "cellTransforms": Array [
            [Function],
          ],
          "props": Object {},
          "title": "",
          "transforms": undefined,
        },
      ]
    }
    className=""
    contentId="expanded-content"
    dropdownDirection="down"
    dropdownPosition="right"
    expandId="expandable-toggle"
    gridBreakPoint="grid-md"
    onCollapse={null}
    onExpand={null}
    onSort={[Function]}
    role="grid"
    rowLabeledBy="simple-node"
    rows={Array []}
    sortBy={Object {}}
    variant={null}
  >
    <TableHeader
      className=""
    />
    <TableBody
      className=""
      onRowClick={[Function]}
      rowKey="id"
    />
  </Table>
</Card>
`;

exports[`Spots page should render the editor correctly 1`] = `
<tr>
  <td
    key="0"
  >
    <TextInput
      aria-label="Name"
      className=""
      defaultValue="Spot 2"
      isDisabled={false}
      isReadOnly={false}
      isRequired={false}
      isValid={true}
      key="0"
      name="name"
      onChange={[Function]}
      type="text"
    />
  </td>
  <td
    key="1"
  >
    <MultiTypeaheadSelectInput
      defaultValue={
        Array [
          Object {
            "name": "Skill 1",
            "tenantId": 0,
          },
          Object {
            "name": "Skill 2",
            "tenantId": 0,
          },
        ]
      }
      emptyText="Select required skills"
      key="1"
      onChange={[Function]}
      optionToStringMap={[Function]}
      options={
        Array [
          Object {
            "name": "Skill 1",
            "tenantId": 0,
          },
          Object {
            "name": "Skill 2",
            "tenantId": 0,
          },
        ]
      }
    />
  </td>
</tr>
`;

exports[`Spots page should render the viewer correctly 1`] = `
<tr>
  <td
    key="0"
  >
    <Text
      key="0"
    >
      Spot 2
    </Text>
  </td>
  <td
    key="1"
  >
    <ChipGroup
      className=""
      collapsedText="\${remaining} more"
      expandedText="Show Less"
      key="1"
      withToolbar={false}
    >
      <Chip
        className=""
        closeBtnAriaLabel="close"
        component="div"
        isOverflowChip={false}
        isReadOnly={true}
        key="Skill 1"
        onClick={[Function]}
        tooltipPosition="top"
      >
        Skill 1
      </Chip>
      <Chip
        className=""
        closeBtnAriaLabel="close"
        component="div"
        isOverflowChip={false}
        isReadOnly={true}
        key="Skill 2"
        onClick={[Function]}
        tooltipPosition="top"
      >
        Skill 2
      </Chip>
    </ChipGroup>
  </td>
</tr>
`;
