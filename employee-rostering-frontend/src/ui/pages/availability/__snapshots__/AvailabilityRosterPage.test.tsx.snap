// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Availability Roster Page should render Availability EventWrapper correctly 1`] = `
<div
  className="availability-wrapper"
  style={
    Object {
      "backgroundColor": "transparent",
      "border": "none",
      "gridRowEnd": 81,
      "gridRowStart": 51,
      "zIndex": 0,
    }
  }
>
  <span>
    Availability
  </span>
</div>
`;

exports[`Availability Roster Page should render Shift EventWrapper correctly 1`] = `
<div
  className="rbc-event"
  style={
    Object {
      "backgroundColor": "transparent",
      "border": "none",
      "gridRowEnd": 81,
      "gridRowStart": 51,
      "zIndex": 1,
    }
  }
>
  <span>
    Shift
  </span>
</div>
`;

exports[`Availability Roster Page should render correctly when creating a new availability via button 1`] = `
<Fragment>
  <Level
    className=""
    gutter="sm"
    style={
      Object {
        "backgroundColor": "var(--pf-global--BackgroundColor--100)",
        "height": "60px",
        "padding": "5px 5px 5px 5px",
      }
    }
  >
    <LevelItem
      style={
        Object {
          "display": "flex",
        }
      }
    >
      <WeekPicker
        aria-label="Select Week to View"
        onChange={[Function]}
        value={2018-07-01T00:00:00.000Z}
      />
      <TypeaheadSelectInput
        aria-label="Select Employee"
        defaultValue={
          Object {
            "contract": Object {
              "id": 5,
              "maximumMinutesPerDay": 10,
              "maximumMinutesPerMonth": 500,
              "maximumMinutesPerWeek": 70,
              "maximumMinutesPerYear": 6000,
              "name": "Basic Contract",
              "tenantId": 0,
              "version": 0,
            },
            "id": 4,
            "name": "Employee 1",
            "skillProficiencySet": Array [
              Object {
                "id": 6,
                "name": "Not Required Skill",
                "tenantId": 0,
                "version": 0,
              },
            ],
            "tenantId": 0,
            "version": 0,
          }
        }
        emptyText="Select Employee"
        onChange={[Function]}
        optionToStringMap={[Function]}
        options={
          Array [
            Object {
              "contract": Object {
                "id": 5,
                "maximumMinutesPerDay": 10,
                "maximumMinutesPerMonth": 500,
                "maximumMinutesPerWeek": 70,
                "maximumMinutesPerYear": 6000,
                "name": "Basic Contract",
                "tenantId": 0,
                "version": 0,
              },
              "id": 4,
              "name": "Employee 1",
              "skillProficiencySet": Array [
                Object {
                  "id": 6,
                  "name": "Not Required Skill",
                  "tenantId": 0,
                  "version": 0,
                },
              ],
              "tenantId": 0,
              "version": 0,
            },
          ]
        }
      />
    </LevelItem>
    <LevelItem
      style={
        Object {
          "display": "flex",
        }
      }
    >
      <Button
        aria-label="Publish"
        onClick={[MockFunction]}
        style={
          Object {
            "margin": "5px",
          }
        }
      >
        Publish
      </Button>
      <Button
        aria-label="Solve"
        onClick={[MockFunction]}
        style={
          Object {
            "margin": "5px",
          }
        }
      >
        Schedule
      </Button>
      <Button
        aria-label="Refresh"
        onClick={[Function]}
        style={
          Object {
            "margin": "5px",
          }
        }
      >
        Refresh
      </Button>
      <Button
        aria-label="Create Availability"
        onClick={[Function]}
        style={
          Object {
            "margin": "5px",
          }
        }
      >
        Create Availability
      </Button>
    </LevelItem>
  </Level>
  <div
    style={
      Object {
        "height": "calc(100% - 60px)",
      }
    }
  >
    <Connect(Component)
      isOpen={true}
      onClose={[Function]}
      onDelete={[Function]}
      onSave={[Function]}
    />
    <Connect(EditShiftModal)
      aria-label="Edit Shift"
      isOpen={false}
      onClose={[Function]}
      onDelete={[Function]}
      onSave={[Function]}
    />
    <Title
      size="md"
    >
      Employee 1
    </Title>
    <div
      style={
        Object {
          "height": "calc(100% - 20px)",
        }
      }
    >
      <ForwardRef
        allDayAccessor={[Function]}
        components={
          Object {
            "event": [Function],
            "eventWrapper": [Function],
          }
        }
        date={2018-07-01T00:00:00.000Z}
        dayPropGetter={[Function]}
        endAccessor={[Function]}
        eventPropGetter={[Function]}
        events={
          Array [
            Object {
              "end": 2018-07-01T23:59:59.999Z,
              "reference": Object {
                "employee": Object {
                  "contract": Object {
                    "id": 5,
                    "maximumMinutesPerDay": 10,
                    "maximumMinutesPerMonth": 500,
                    "maximumMinutesPerWeek": 70,
                    "maximumMinutesPerYear": 6000,
                    "name": "Basic Contract",
                    "tenantId": 0,
                    "version": 0,
                  },
                  "id": 4,
                  "name": "Employee 1",
                  "skillProficiencySet": Array [
                    Object {
                      "id": 6,
                      "name": "Not Required Skill",
                      "tenantId": 0,
                      "version": 0,
                    },
                  ],
                  "tenantId": 0,
                  "version": 0,
                },
                "endDateTime": 2018-07-02T00:00:00.000Z,
                "id": 123,
                "startDateTime": 2018-07-01T00:00:00.000Z,
                "state": "DESIRED",
                "tenantId": 0,
                "version": 0,
              },
              "start": 2018-07-01T00:00:00.001Z,
              "type": "Availability",
            },
            Object {
              "end": 2018-07-01T17:00:00.000Z,
              "reference": Object {
                "contractMinutesViolationPenaltyList": Array [],
                "desiredTimeslotForEmployeeRewardList": Array [],
                "employee": Object {
                  "contract": Object {
                    "id": 5,
                    "maximumMinutesPerDay": 10,
                    "maximumMinutesPerMonth": 500,
                    "maximumMinutesPerWeek": 70,
                    "maximumMinutesPerYear": 6000,
                    "name": "Basic Contract",
                    "tenantId": 0,
                    "version": 0,
                  },
                  "id": 4,
                  "name": "Employee 1",
                  "skillProficiencySet": Array [
                    Object {
                      "id": 6,
                      "name": "Not Required Skill",
                      "tenantId": 0,
                      "version": 0,
                    },
                  ],
                  "tenantId": 0,
                  "version": 0,
                },
                "endDateTime": 2018-07-01T17:00:00.000Z,
                "id": 1,
                "indictmentScore": Object {
                  "hardScore": 0,
                  "mediumScore": 0,
                  "softScore": 0,
                },
                "pinnedByUser": false,
                "requiredSkillViolationList": Array [],
                "rotationEmployee": Object {
                  "contract": Object {
                    "id": 5,
                    "maximumMinutesPerDay": 10,
                    "maximumMinutesPerMonth": 500,
                    "maximumMinutesPerWeek": 70,
                    "maximumMinutesPerYear": 6000,
                    "name": "Basic Contract",
                    "tenantId": 0,
                    "version": 0,
                  },
                  "id": 7,
                  "name": "Rotation Employee",
                  "skillProficiencySet": Array [
                    Object {
                      "id": 6,
                      "name": "Not Required Skill",
                      "tenantId": 0,
                      "version": 0,
                    },
                  ],
                  "tenantId": 0,
                  "version": 0,
                },
                "rotationViolationPenaltyList": Array [],
                "shiftEmployeeConflictList": Array [],
                "spot": Object {
                  "id": 2,
                  "name": "Spot",
                  "requiredSkillSet": Array [
                    Object {
                      "id": 3,
                      "name": "Skill",
                      "tenantId": 0,
                      "version": 0,
                    },
                  ],
                  "tenantId": 0,
                  "version": 0,
                },
                "startDateTime": 2018-07-01T09:00:00.000Z,
                "tenantId": 0,
                "unassignedShiftPenaltyList": Array [],
                "unavailableEmployeeViolationList": Array [],
                "undesiredTimeslotForEmployeePenaltyList": Array [],
                "version": 0,
              },
              "start": 2018-07-01T09:00:00.000Z,
              "type": "Shift",
            },
          ]
        }
        key="4"
        length={0}
        localizer={
          DateLocalizer {
            "format": [Function],
            "formats": Object {
              "agendaDateFormat": "ddd MMM DD",
              "agendaHeaderFormat": [Function],
              "agendaTimeFormat": "LT",
              "agendaTimeRangeFormat": [Function],
              "dateFormat": "DD",
              "dayFormat": "DD ddd",
              "dayHeaderFormat": "dddd MMM DD",
              "dayRangeHeaderFormat": [Function],
              "eventTimeRangeEndFormat": [Function],
              "eventTimeRangeFormat": [Function],
              "eventTimeRangeStartFormat": [Function],
              "monthHeaderFormat": "MMMM YYYY",
              "selectRangeFormat": [Function],
              "timeGutterFormat": "LT",
              "weekdayFormat": "ddd",
            },
            "propType": [Function],
            "startOfWeek": [Function],
          }
        }
        onNavigate={[Function]}
        onSelectSlot={[Function]}
        onView={[Function]}
        selectable={true}
        showMultiDayTimes={true}
        startAccessor={[Function]}
        timeslots={4}
        titleAccessor={[Function]}
        toolbar={false}
        view="week"
        views={
          Array [
            "week",
          ]
        }
      />
    </div>
  </div>
</Fragment>
`;

exports[`Availability Roster Page should render correctly when loaded 1`] = `
<Fragment>
  <Level
    className=""
    gutter="sm"
    style={
      Object {
        "backgroundColor": "var(--pf-global--BackgroundColor--100)",
        "height": "60px",
        "padding": "5px 5px 5px 5px",
      }
    }
  >
    <LevelItem
      style={
        Object {
          "display": "flex",
        }
      }
    >
      <WeekPicker
        aria-label="Select Week to View"
        onChange={[Function]}
        value={2018-07-01T00:00:00.000Z}
      />
      <TypeaheadSelectInput
        aria-label="Select Employee"
        defaultValue={
          Object {
            "contract": Object {
              "id": 5,
              "maximumMinutesPerDay": 10,
              "maximumMinutesPerMonth": 500,
              "maximumMinutesPerWeek": 70,
              "maximumMinutesPerYear": 6000,
              "name": "Basic Contract",
              "tenantId": 0,
              "version": 0,
            },
            "id": 4,
            "name": "Employee 1",
            "skillProficiencySet": Array [
              Object {
                "id": 6,
                "name": "Not Required Skill",
                "tenantId": 0,
                "version": 0,
              },
            ],
            "tenantId": 0,
            "version": 0,
          }
        }
        emptyText="Select Employee"
        onChange={[Function]}
        optionToStringMap={[Function]}
        options={
          Array [
            Object {
              "contract": Object {
                "id": 5,
                "maximumMinutesPerDay": 10,
                "maximumMinutesPerMonth": 500,
                "maximumMinutesPerWeek": 70,
                "maximumMinutesPerYear": 6000,
                "name": "Basic Contract",
                "tenantId": 0,
                "version": 0,
              },
              "id": 4,
              "name": "Employee 1",
              "skillProficiencySet": Array [
                Object {
                  "id": 6,
                  "name": "Not Required Skill",
                  "tenantId": 0,
                  "version": 0,
                },
              ],
              "tenantId": 0,
              "version": 0,
            },
          ]
        }
      />
    </LevelItem>
    <LevelItem
      style={
        Object {
          "display": "flex",
        }
      }
    >
      <Button
        aria-label="Publish"
        onClick={[MockFunction]}
        style={
          Object {
            "margin": "5px",
          }
        }
      >
        Publish
      </Button>
      <Button
        aria-label="Solve"
        onClick={[MockFunction]}
        style={
          Object {
            "margin": "5px",
          }
        }
      >
        Schedule
      </Button>
      <Button
        aria-label="Refresh"
        onClick={[Function]}
        style={
          Object {
            "margin": "5px",
          }
        }
      >
        Refresh
      </Button>
      <Button
        aria-label="Create Availability"
        onClick={[Function]}
        style={
          Object {
            "margin": "5px",
          }
        }
      >
        Create Availability
      </Button>
    </LevelItem>
  </Level>
  <div
    style={
      Object {
        "height": "calc(100% - 60px)",
      }
    }
  >
    <Connect(Component)
      isOpen={false}
      onClose={[Function]}
      onDelete={[Function]}
      onSave={[Function]}
    />
    <Connect(EditShiftModal)
      aria-label="Edit Shift"
      isOpen={false}
      onClose={[Function]}
      onDelete={[Function]}
      onSave={[Function]}
    />
    <Title
      size="md"
    >
      Employee 1
    </Title>
    <div
      style={
        Object {
          "height": "calc(100% - 20px)",
        }
      }
    >
      <ForwardRef
        allDayAccessor={[Function]}
        components={
          Object {
            "event": [Function],
            "eventWrapper": [Function],
          }
        }
        date={2018-07-01T00:00:00.000Z}
        dayPropGetter={[Function]}
        endAccessor={[Function]}
        eventPropGetter={[Function]}
        events={
          Array [
            Object {
              "end": 2018-07-01T23:59:59.999Z,
              "reference": Object {
                "employee": Object {
                  "contract": Object {
                    "id": 5,
                    "maximumMinutesPerDay": 10,
                    "maximumMinutesPerMonth": 500,
                    "maximumMinutesPerWeek": 70,
                    "maximumMinutesPerYear": 6000,
                    "name": "Basic Contract",
                    "tenantId": 0,
                    "version": 0,
                  },
                  "id": 4,
                  "name": "Employee 1",
                  "skillProficiencySet": Array [
                    Object {
                      "id": 6,
                      "name": "Not Required Skill",
                      "tenantId": 0,
                      "version": 0,
                    },
                  ],
                  "tenantId": 0,
                  "version": 0,
                },
                "endDateTime": 2018-07-02T00:00:00.000Z,
                "id": 123,
                "startDateTime": 2018-07-01T00:00:00.000Z,
                "state": "DESIRED",
                "tenantId": 0,
                "version": 0,
              },
              "start": 2018-07-01T00:00:00.001Z,
              "type": "Availability",
            },
            Object {
              "end": 2018-07-01T17:00:00.000Z,
              "reference": Object {
                "contractMinutesViolationPenaltyList": Array [],
                "desiredTimeslotForEmployeeRewardList": Array [],
                "employee": Object {
                  "contract": Object {
                    "id": 5,
                    "maximumMinutesPerDay": 10,
                    "maximumMinutesPerMonth": 500,
                    "maximumMinutesPerWeek": 70,
                    "maximumMinutesPerYear": 6000,
                    "name": "Basic Contract",
                    "tenantId": 0,
                    "version": 0,
                  },
                  "id": 4,
                  "name": "Employee 1",
                  "skillProficiencySet": Array [
                    Object {
                      "id": 6,
                      "name": "Not Required Skill",
                      "tenantId": 0,
                      "version": 0,
                    },
                  ],
                  "tenantId": 0,
                  "version": 0,
                },
                "endDateTime": 2018-07-01T17:00:00.000Z,
                "id": 1,
                "indictmentScore": Object {
                  "hardScore": 0,
                  "mediumScore": 0,
                  "softScore": 0,
                },
                "pinnedByUser": false,
                "requiredSkillViolationList": Array [],
                "rotationEmployee": Object {
                  "contract": Object {
                    "id": 5,
                    "maximumMinutesPerDay": 10,
                    "maximumMinutesPerMonth": 500,
                    "maximumMinutesPerWeek": 70,
                    "maximumMinutesPerYear": 6000,
                    "name": "Basic Contract",
                    "tenantId": 0,
                    "version": 0,
                  },
                  "id": 7,
                  "name": "Rotation Employee",
                  "skillProficiencySet": Array [
                    Object {
                      "id": 6,
                      "name": "Not Required Skill",
                      "tenantId": 0,
                      "version": 0,
                    },
                  ],
                  "tenantId": 0,
                  "version": 0,
                },
                "rotationViolationPenaltyList": Array [],
                "shiftEmployeeConflictList": Array [],
                "spot": Object {
                  "id": 2,
                  "name": "Spot",
                  "requiredSkillSet": Array [
                    Object {
                      "id": 3,
                      "name": "Skill",
                      "tenantId": 0,
                      "version": 0,
                    },
                  ],
                  "tenantId": 0,
                  "version": 0,
                },
                "startDateTime": 2018-07-01T09:00:00.000Z,
                "tenantId": 0,
                "unassignedShiftPenaltyList": Array [],
                "unavailableEmployeeViolationList": Array [],
                "undesiredTimeslotForEmployeePenaltyList": Array [],
                "version": 0,
              },
              "start": 2018-07-01T09:00:00.000Z,
              "type": "Shift",
            },
          ]
        }
        key="4"
        length={0}
        localizer={
          DateLocalizer {
            "format": [Function],
            "formats": Object {
              "agendaDateFormat": "ddd MMM DD",
              "agendaHeaderFormat": [Function],
              "agendaTimeFormat": "LT",
              "agendaTimeRangeFormat": [Function],
              "dateFormat": "DD",
              "dayFormat": "DD ddd",
              "dayHeaderFormat": "dddd MMM DD",
              "dayRangeHeaderFormat": [Function],
              "eventTimeRangeEndFormat": [Function],
              "eventTimeRangeFormat": [Function],
              "eventTimeRangeStartFormat": [Function],
              "monthHeaderFormat": "MMMM YYYY",
              "selectRangeFormat": [Function],
              "timeGutterFormat": "LT",
              "weekdayFormat": "ddd",
            },
            "propType": [Function],
            "startOfWeek": [Function],
          }
        }
        onNavigate={[Function]}
        onSelectSlot={[Function]}
        onView={[Function]}
        selectable={true}
        showMultiDayTimes={true}
        startAccessor={[Function]}
        timeslots={4}
        titleAccessor={[Function]}
        toolbar={false}
        view="week"
        views={
          Array [
            "week",
          ]
        }
      />
    </div>
  </div>
</Fragment>
`;

exports[`Availability Roster Page should render correctly when loading 1`] = `<div />`;

exports[`Availability Roster Page should render correctly when solving 1`] = `
<Fragment>
  <Level
    className=""
    gutter="sm"
    style={
      Object {
        "backgroundColor": "var(--pf-global--BackgroundColor--100)",
        "height": "60px",
        "padding": "5px 5px 5px 5px",
      }
    }
  >
    <LevelItem
      style={
        Object {
          "display": "flex",
        }
      }
    >
      <WeekPicker
        aria-label="Select Week to View"
        onChange={[Function]}
        value={2018-07-01T00:00:00.000Z}
      />
      <TypeaheadSelectInput
        aria-label="Select Employee"
        defaultValue={
          Object {
            "contract": Object {
              "id": 5,
              "maximumMinutesPerDay": 10,
              "maximumMinutesPerMonth": 500,
              "maximumMinutesPerWeek": 70,
              "maximumMinutesPerYear": 6000,
              "name": "Basic Contract",
              "tenantId": 0,
              "version": 0,
            },
            "id": 4,
            "name": "Employee 1",
            "skillProficiencySet": Array [
              Object {
                "id": 6,
                "name": "Not Required Skill",
                "tenantId": 0,
                "version": 0,
              },
            ],
            "tenantId": 0,
            "version": 0,
          }
        }
        emptyText="Select Employee"
        onChange={[Function]}
        optionToStringMap={[Function]}
        options={
          Array [
            Object {
              "contract": Object {
                "id": 5,
                "maximumMinutesPerDay": 10,
                "maximumMinutesPerMonth": 500,
                "maximumMinutesPerWeek": 70,
                "maximumMinutesPerYear": 6000,
                "name": "Basic Contract",
                "tenantId": 0,
                "version": 0,
              },
              "id": 4,
              "name": "Employee 1",
              "skillProficiencySet": Array [
                Object {
                  "id": 6,
                  "name": "Not Required Skill",
                  "tenantId": 0,
                  "version": 0,
                },
              ],
              "tenantId": 0,
              "version": 0,
            },
          ]
        }
      />
    </LevelItem>
    <LevelItem
      style={
        Object {
          "display": "flex",
        }
      }
    >
      <Button
        aria-label="Publish"
        onClick={[MockFunction]}
        style={
          Object {
            "margin": "5px",
          }
        }
      >
        Publish
      </Button>
      <Button
        aria-label="Terminate Early"
        onClick={[MockFunction]}
        style={
          Object {
            "margin": "5px",
          }
        }
      >
        Terminate Early
      </Button>
      <Button
        aria-label="Refresh"
        onClick={[Function]}
        style={
          Object {
            "margin": "5px",
          }
        }
      >
        Refresh
      </Button>
      <Button
        aria-label="Create Availability"
        onClick={[Function]}
        style={
          Object {
            "margin": "5px",
          }
        }
      >
        Create Availability
      </Button>
    </LevelItem>
  </Level>
  <div
    style={
      Object {
        "height": "calc(100% - 60px)",
      }
    }
  >
    <Connect(Component)
      isOpen={false}
      onClose={[Function]}
      onDelete={[Function]}
      onSave={[Function]}
    />
    <Connect(EditShiftModal)
      aria-label="Edit Shift"
      isOpen={false}
      onClose={[Function]}
      onDelete={[Function]}
      onSave={[Function]}
    />
    <Title
      size="md"
    >
      Employee 1
    </Title>
    <div
      style={
        Object {
          "height": "calc(100% - 20px)",
        }
      }
    >
      <ForwardRef
        allDayAccessor={[Function]}
        components={
          Object {
            "event": [Function],
            "eventWrapper": [Function],
          }
        }
        date={2018-07-01T00:00:00.000Z}
        dayPropGetter={[Function]}
        endAccessor={[Function]}
        eventPropGetter={[Function]}
        events={
          Array [
            Object {
              "end": 2018-07-01T23:59:59.999Z,
              "reference": Object {
                "employee": Object {
                  "contract": Object {
                    "id": 5,
                    "maximumMinutesPerDay": 10,
                    "maximumMinutesPerMonth": 500,
                    "maximumMinutesPerWeek": 70,
                    "maximumMinutesPerYear": 6000,
                    "name": "Basic Contract",
                    "tenantId": 0,
                    "version": 0,
                  },
                  "id": 4,
                  "name": "Employee 1",
                  "skillProficiencySet": Array [
                    Object {
                      "id": 6,
                      "name": "Not Required Skill",
                      "tenantId": 0,
                      "version": 0,
                    },
                  ],
                  "tenantId": 0,
                  "version": 0,
                },
                "endDateTime": 2018-07-02T00:00:00.000Z,
                "id": 123,
                "startDateTime": 2018-07-01T00:00:00.000Z,
                "state": "DESIRED",
                "tenantId": 0,
                "version": 0,
              },
              "start": 2018-07-01T00:00:00.001Z,
              "type": "Availability",
            },
            Object {
              "end": 2018-07-01T17:00:00.000Z,
              "reference": Object {
                "contractMinutesViolationPenaltyList": Array [],
                "desiredTimeslotForEmployeeRewardList": Array [],
                "employee": Object {
                  "contract": Object {
                    "id": 5,
                    "maximumMinutesPerDay": 10,
                    "maximumMinutesPerMonth": 500,
                    "maximumMinutesPerWeek": 70,
                    "maximumMinutesPerYear": 6000,
                    "name": "Basic Contract",
                    "tenantId": 0,
                    "version": 0,
                  },
                  "id": 4,
                  "name": "Employee 1",
                  "skillProficiencySet": Array [
                    Object {
                      "id": 6,
                      "name": "Not Required Skill",
                      "tenantId": 0,
                      "version": 0,
                    },
                  ],
                  "tenantId": 0,
                  "version": 0,
                },
                "endDateTime": 2018-07-01T17:00:00.000Z,
                "id": 1,
                "indictmentScore": Object {
                  "hardScore": 0,
                  "mediumScore": 0,
                  "softScore": 0,
                },
                "pinnedByUser": false,
                "requiredSkillViolationList": Array [],
                "rotationEmployee": Object {
                  "contract": Object {
                    "id": 5,
                    "maximumMinutesPerDay": 10,
                    "maximumMinutesPerMonth": 500,
                    "maximumMinutesPerWeek": 70,
                    "maximumMinutesPerYear": 6000,
                    "name": "Basic Contract",
                    "tenantId": 0,
                    "version": 0,
                  },
                  "id": 7,
                  "name": "Rotation Employee",
                  "skillProficiencySet": Array [
                    Object {
                      "id": 6,
                      "name": "Not Required Skill",
                      "tenantId": 0,
                      "version": 0,
                    },
                  ],
                  "tenantId": 0,
                  "version": 0,
                },
                "rotationViolationPenaltyList": Array [],
                "shiftEmployeeConflictList": Array [],
                "spot": Object {
                  "id": 2,
                  "name": "Spot",
                  "requiredSkillSet": Array [
                    Object {
                      "id": 3,
                      "name": "Skill",
                      "tenantId": 0,
                      "version": 0,
                    },
                  ],
                  "tenantId": 0,
                  "version": 0,
                },
                "startDateTime": 2018-07-01T09:00:00.000Z,
                "tenantId": 0,
                "unassignedShiftPenaltyList": Array [],
                "unavailableEmployeeViolationList": Array [],
                "undesiredTimeslotForEmployeePenaltyList": Array [],
                "version": 0,
              },
              "start": 2018-07-01T09:00:00.000Z,
              "type": "Shift",
            },
          ]
        }
        key="4"
        length={0}
        localizer={
          DateLocalizer {
            "format": [Function],
            "formats": Object {
              "agendaDateFormat": "ddd MMM DD",
              "agendaHeaderFormat": [Function],
              "agendaTimeFormat": "LT",
              "agendaTimeRangeFormat": [Function],
              "dateFormat": "DD",
              "dayFormat": "DD ddd",
              "dayHeaderFormat": "dddd MMM DD",
              "dayRangeHeaderFormat": [Function],
              "eventTimeRangeEndFormat": [Function],
              "eventTimeRangeFormat": [Function],
              "eventTimeRangeStartFormat": [Function],
              "monthHeaderFormat": "MMMM YYYY",
              "selectRangeFormat": [Function],
              "timeGutterFormat": "LT",
              "weekdayFormat": "ddd",
            },
            "propType": [Function],
            "startOfWeek": [Function],
          }
        }
        onNavigate={[Function]}
        onSelectSlot={[Function]}
        onView={[Function]}
        selectable={true}
        showMultiDayTimes={true}
        startAccessor={[Function]}
        timeslots={4}
        titleAccessor={[Function]}
        toolbar={false}
        view="week"
        views={
          Array [
            "week",
          ]
        }
      />
    </div>
  </div>
</Fragment>
`;
